#합성곱:적은 수의 가중치로 입력을 슬라이딩하면서 연산을 수행하는 방법(가중치의 수가 입력의 수랑 다름(입력보다 훨씬 작은 가중치 사용,3or5개), 입력의 수>>출력의 수(가능한 필터의 위치))
#2차원 이미지를 1차원으로 펼치지 않고 그대로 쓰기때문에 이미지 분류 결과가 더 좋음

#커널=필터=가중치(도장 찍듯이,여러개 지정 가능,필터마다 절편 존재)
#만들어진 출력을 특성or특성맵 이라고함(출력의 차원=입력의 차원,입력의 차원을 유지하면서 계속 합성곱 가능),특성맵의 마지막차원=필터의 개수
from tensorflow import keras #케라스 합성곱 층
keras.layers.Conv2D(10,kernal_size=(3,3),activation='relu') #10개의 필터, 3x3커널(대부분 정방형 사용),활성함수로 렐루함수 사용

#패딩:입력 배열의 주위를 가상의 원소 0으로 채우는 것>>필터가 슬라이딩하는 위치를 늘려줌(입력의 특성맵=출력의 특성맵(세임 패딩) 가능>>출력의 사이즈 계산 필요없어서 많이 사용)
keras.layers.Conv2D(10,kernal_size=(3,3),activation='relu',padding='same') #케라스의 패딩 설정

#스트라이드:이동하는 크기 지정(지정 안해도 자동으로 풀링의 크기에 맞춰서 셋팅됨)
keras.layers.Conv2D(10,kernal_size=(3,3),activation='relu',padding='same',strides=1) #케라스의 스트라이드 설정(보통 1사용)

#풀링 층:겹치지 않는 스트라이드로 슬라이딩을 진행해서 출력 특성맵의 크기를 절반으로 줄여줌
#평균 풀링:출력 특성에 해당되는 영역에서 평균냄, 최대 풀링:출력 특성 중 최대값을 골라냄)>>ex)(2,2,3)특성맵을 (1,1,3)특성맵으로(마지막 차원(=채널차원)은 변경시키지 않음
keras.layers.Maxpooling2D(2) #케라스의 풀링 층(대부분의 풀링 크기는 2>>크기 절반으로 줄임)
#원래 keras.layers.Maxpooling2D(2,strides=2,padding='valid')인데 strides는 풀링과 크기 같고, 패딩(주변을 가상의 원소 0으로 채우는 것)은 안하므로(valid) 위 같이 사용

#합성곱 신경망의 전체 구조:입력에 패딩 추가>>필터 갯수 설정>>활성화함수 적용 후 합성곱 층 계산>>출력 특성맵 생성>>풀링 층 적용해서 크기 줄이기>>1차원 배열로 펼치기>>밀집층(맨 끝에 꼭 1개이상 둬야함)/출력층 통과 후 최종 예측 만듬(기존 신경망 구조)
#합성곱 신경망은 너비,높이는 점점 줄고 깊이는 점점 깊어지는것이 특징

#3차원 합성곱:이미지는 사실 3차원임(너비x높이xRGB(채널층,흑백도 채널층이 1인 3차원) 차원)>>커널도 3차원으로 설정(채널층은 같게)>>1개의 특성맵이 결과로 출력됨
#여러개의 필터인 경우도 2차원과 같은 원리